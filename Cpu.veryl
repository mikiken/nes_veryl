import Consts::*;

module Cpu (
    data        : inout  tri logic<DATA_WIDTH>,
    addr        : output logic    <ADDR_WIDTH>,
    clk         : input  clock                ,
    rst_n       : input  reset                ,
    nmi_n       : input  logic                ,
    irq_n       : input  logic                ,
    write_enable: output logic                ,
) {
    // Registers
    struct Status {
        negative    : logic,
        overflow    : logic,
        reserved    : logic,
        break_mode  : logic,
        decimal_mode: logic,
        interrupt   : logic,
        zero        : logic,
        carry       : logic,
    }

    struct Registers {
        acc   : logic <DATA_WIDTH>,
        idx_x : logic <DATA_WIDTH>,
        idx_y : logic <DATA_WIDTH>,
        sp    : logic <DATA_WIDTH>,
        pc    : logic <ADDR_WIDTH>,
        status: Status            ,
    }

    var registers: Registers;

    always_ff (clk, rst_n) {
        if_reset {
            // Init registers
            registers.acc                 = 8'h00;
            registers.idx_x               = 8'h00;
            registers.idx_y               = 8'h00;
            registers.sp                  = 8'hFD;
            registers.pc                  = 16'h0000;
            registers.status.negative     = 0;
            registers.status.overflow     = 0;
            registers.status.reserved     = 1;
            registers.status.break_mode   = 1;
            registers.status.decimal_mode = 0;
            registers.status.interrupt    = 1;
            registers.status.zero         = 0;
            registers.status.carry        = 0;
        } else {
            // Instruction fetch
        }
    }
}
