import Consts::*;

package Opcodes {

    /******** Transfer Opcodeructions ********/

    // Load to register A
    const LDA_Imm   : Opcode = 8'hA9 as Opcode;
    const LDA_Zero  : Opcode = 8'hA5 as Opcode;
    const LDA_Zero_X: Opcode = 8'hB5 as Opcode;
    const LDA_Abs   : Opcode = 8'hAD as Opcode;
    const LDA_Abs_X : Opcode = 8'hBD as Opcode;
    const LDA_Abs_Y : Opcode = 8'hB9 as Opcode;
    const LDA_Ind_X : Opcode = 8'hA1 as Opcode;
    const LDA_Ind_Y : Opcode = 8'hB1 as Opcode;

    // Load to register X
    const LDX_Imm   : Opcode = 8'hA2 as Opcode;
    const LDX_Zero  : Opcode = 8'hA6 as Opcode;
    const LDX_Zero_Y: Opcode = 8'hB6 as Opcode;
    const LDX_Abs   : Opcode = 8'hAE as Opcode;
    const LDX_Abs_Y : Opcode = 8'hBE as Opcode;

    // Load to register Y
    const LDY_Imm   : Opcode = 8'hA0 as Opcode;
    const LDY_Zero  : Opcode = 8'hA4 as Opcode;
    const LDY_Zero_X: Opcode = 8'hB4 as Opcode;
    const LDY_Abs   : Opcode = 8'hAC as Opcode;
    const LDY_Abs_X : Opcode = 8'hBC as Opcode;

    // Store from register A
    const STA_Zero  : Opcode = 8'h85 as Opcode;
    const STA_Zero_X: Opcode = 8'h95 as Opcode;
    const STA_Abs   : Opcode = 8'h8D as Opcode;
    const STA_Abs_X : Opcode = 8'h9D as Opcode;
    const STA_Abs_Y : Opcode = 8'h99 as Opcode;
    const STA_Ind_X : Opcode = 8'h81 as Opcode;
    const STA_Ind_Y : Opcode = 8'h91 as Opcode;

    // Store from register X
    const STX_Zero  : Opcode = 8'h86 as Opcode;
    const STX_Zero_Y: Opcode = 8'h96 as Opcode;
    const STX_Abs   : Opcode = 8'h8E as Opcode;

    // Store from register Y
    const STY_Zero  : Opcode = 8'h84 as Opcode;
    const STY_Zero_X: Opcode = 8'h94 as Opcode;
    const STY_Abs   : Opcode = 8'h8C as Opcode;

    // Copy between registers
    const TAX: Opcode = 8'hAA as Opcode;
    const TAY: Opcode = 8'hA8 as Opcode;
    const TSX: Opcode = 8'hBA as Opcode;
    const TXA: Opcode = 8'h8A as Opcode;
    const TXS: Opcode = 8'h9A as Opcode;
    const TYA: Opcode = 8'h98 as Opcode;


    /******** Arithmetic Opcodeructions ********/

    // Add A and memory with carry and store in A
    const ADC_Imm   : Opcode = 8'h69 as Opcode;
    const ADC_Zero  : Opcode = 8'h65 as Opcode;
    const ADC_Zero_X: Opcode = 8'h75 as Opcode;
    const ADC_Abs   : Opcode = 8'h6D as Opcode;
    const ADC_Abs_X : Opcode = 8'h7D as Opcode;
    const ADC_Abs_Y : Opcode = 8'h79 as Opcode;
    const ADC_Ind_X : Opcode = 8'h61 as Opcode;
    const ADC_Ind_Y : Opcode = 8'h71 as Opcode;

    // Bitwise AND A with memory and store in A
    const AND_Imm   : Opcode = 8'h29 as Opcode;
    const AND_Zero  : Opcode = 8'h25 as Opcode;
    const AND_Zero_X: Opcode = 8'h35 as Opcode;
    const AND_Abs   : Opcode = 8'h2D as Opcode;
    const AND_Abs_X : Opcode = 8'h3D as Opcode;
    const AND_Abs_Y : Opcode = 8'h39 as Opcode;
    const AND_Ind_X : Opcode = 8'h21 as Opcode;
    const AND_Ind_Y : Opcode = 8'h31 as Opcode;

    // Arithmetic shift left
    const ASL_Acc   : Opcode = 8'h0A as Opcode;
    const ASL_Zero  : Opcode = 8'h06 as Opcode;
    const ASL_Zero_X: Opcode = 8'h16 as Opcode;
    const ASL_Abs   : Opcode = 8'h0E as Opcode;
    const ASL_Abs_X : Opcode = 8'h1E as Opcode;

    // Bitwise compare operation with A and memory
    const BIT_Zero: Opcode = 8'h24 as Opcode;
    const BIT_Abs : Opcode = 8'h2C as Opcode;

    // Compare A with memory
    const CMP_Imm   : Opcode = 8'hC9 as Opcode;
    const CMP_Zero  : Opcode = 8'hC5 as Opcode;
    const CMP_Zero_X: Opcode = 8'hD5 as Opcode;
    const CMP_Abs   : Opcode = 8'hCD as Opcode;
    const CMP_Abs_X : Opcode = 8'hDD as Opcode;
    const CMP_Abs_Y : Opcode = 8'hD9 as Opcode;
    const CMP_Ind_X : Opcode = 8'hC1 as Opcode;
    const CMP_Ind_Y : Opcode = 8'hD1 as Opcode;

    // Compare X with memory
    const CPX_Imm : Opcode = 8'hE0 as Opcode;
    const CPX_Zero: Opcode = 8'hE4 as Opcode;
    const CPX_Abs : Opcode = 8'hEC as Opcode;

    // Compare Y with memory
    const CPY_Imm : Opcode = 8'hC0 as Opcode;
    const CPY_Zero: Opcode = 8'hC4 as Opcode;
    const CPY_Abs : Opcode = 8'hCC as Opcode;

    // Decrement memory
    const DEC_Zero  : Opcode = 8'hC6 as Opcode;
    const DEC_Zero_X: Opcode = 8'hD6 as Opcode;
    const DEC_Abs   : Opcode = 8'hCE as Opcode;
    const DEC_Abs_X : Opcode = 8'hDE as Opcode;

    // Decrement register
    const DEX: Opcode = 8'hCA as Opcode;
    const DEY: Opcode = 8'h88 as Opcode;

    // Bitwise EXOR A with memory and store in A
    const EOR_Imm   : Opcode = 8'h49 as Opcode;
    const EOR_Zero  : Opcode = 8'h45 as Opcode;
    const EOR_Zero_X: Opcode = 8'h55 as Opcode;
    const EOR_Abs   : Opcode = 8'h4D as Opcode;
    const EOR_Abs_X : Opcode = 8'h5D as Opcode;
    const EOR_Abs_Y : Opcode = 8'h59 as Opcode;
    const EOR_Ind_X : Opcode = 8'h41 as Opcode;
    const EOR_Ind_Y : Opcode = 8'h51 as Opcode;

    // Increment memory
    const INC_Zero  : Opcode = 8'hE6 as Opcode;
    const INC_Zero_X: Opcode = 8'hF6 as Opcode;
    const INC_Abs   : Opcode = 8'hEE as Opcode;
    const INC_Abs_X : Opcode = 8'hFE as Opcode;

    // Increment register
    const INX: Opcode = 8'hE8 as Opcode;
    const INY: Opcode = 8'hC8 as Opcode;

    // Logical shift right
    const LSR_Acc   : Opcode = 8'h4A as Opcode;
    const LSR_Zero  : Opcode = 8'h46 as Opcode;
    const LSR_Zero_X: Opcode = 8'h56 as Opcode;
    const LSR_Abs   : Opcode = 8'h4E as Opcode;
    const LSR_Abs_X : Opcode = 8'h5E as Opcode;

    // Bitwise OR A with memory and store in A
    const ORA_Imm   : Opcode = 8'h09 as Opcode;
    const ORA_Zero  : Opcode = 8'h05 as Opcode;
    const ORA_Zero_X: Opcode = 8'h15 as Opcode;
    const ORA_Abs   : Opcode = 8'h0D as Opcode;
    const ORA_Abs_X : Opcode = 8'h1D as Opcode;
    const ORA_Abs_Y : Opcode = 8'h19 as Opcode;
    const ORA_Ind_X : Opcode = 8'h01 as Opcode;
    const ORA_Ind_Y : Opcode = 8'h11 as Opcode;

    // Rotate left
    const ROL_Acc   : Opcode = 8'h2A as Opcode;
    const ROL_Zero  : Opcode = 8'h26 as Opcode;
    const ROL_Zero_X: Opcode = 8'h36 as Opcode;
    const ROL_Abs   : Opcode = 8'h2E as Opcode;
    const ROL_Abs_X : Opcode = 8'h3E as Opcode;

    // Rotate right
    const ROR_Acc   : Opcode = 8'h6A as Opcode;
    const ROR_Zero  : Opcode = 8'h66 as Opcode;
    const ROR_Zero_X: Opcode = 8'h76 as Opcode;
    const ROR_Abs   : Opcode = 8'h6E as Opcode;
    const ROR_Abs_X : Opcode = 8'h7E as Opcode;

    // Subtract memory from A with borrow and store in A
    const SBC_Imm   : Opcode = 8'hE9 as Opcode;
    const SBC_Zero  : Opcode = 8'hE5 as Opcode;
    const SBC_Zero_X: Opcode = 8'hF5 as Opcode;
    const SBC_Abs   : Opcode = 8'hED as Opcode;
    const SBC_Abs_X : Opcode = 8'hFD as Opcode;
    const SBC_Abs_Y : Opcode = 8'hF9 as Opcode;
    const SBC_Ind_X : Opcode = 8'hE1 as Opcode;
    const SBC_Ind_Y : Opcode = 8'hF1 as Opcode;


    /******** Stack Opcodeructions ********/

    // Push register to stack
    const PHA: Opcode = 8'h48 as Opcode;
    const PHP: Opcode = 8'h08 as Opcode;

    // Pop stack to register
    const PLA: Opcode = 8'h68 as Opcode;
    const PLP: Opcode = 8'h28 as Opcode;


    /******** Jump Opcodeructions ********/

    // Jump to address
    const JMP_Abs: Opcode = 8'h4C as Opcode;
    const JMP_Ind: Opcode = 8'h6C as Opcode;

    // Jump to subroutine
    const JSR: Opcode = 8'h20 as Opcode;

    // Return from subroutine
    const RTS: Opcode = 8'h60 as Opcode;

    // Return from interrupt routine
    const RTI: Opcode = 8'h40 as Opcode;

    /******** Branch Opcodeructions ********/

    // Branch if carry flag is cleared
    const BCC: Opcode = 8'h90 as Opcode;

    // Branch if carry flag is set
    const BCS: Opcode = 8'hB0 as Opcode;

    // Branch if zero flag is set
    const BEQ: Opcode = 8'hF0 as Opcode;

    // Branch if negative flag is set
    const BMI: Opcode = 8'h30 as Opcode;

    // Branch if zero flag is cleared
    const BNE: Opcode = 8'hD0 as Opcode;

    // Branch if negative flag is cleared
    const BPL: Opcode = 8'h10 as Opcode;

    // Branch if overflow flag is cleared
    const BVC: Opcode = 8'h50 as Opcode;

    // Branch if overflow flag is set
    const BVS: Opcode = 8'h70 as Opcode;


    /******** Status flag Opcodeructions ********/

    // Clear carry flag
    const CLC: Opcode = 8'h18 as Opcode;

    // Clear decimal mode flag
    // Note: This Opcoderuction is not implemented on NES
    const CLD: Opcode = 8'hD8 as Opcode;

    // Clear interrupt disable flag
    const CLI: Opcode = 8'h58 as Opcode;

    // Clear overflow flag
    const CLV: Opcode = 8'hB8 as Opcode;

    // Set carry flag
    const SEC: Opcode = 8'h38 as Opcode;

    // Set decimal mode flag
    // Note: This Opcoderuction is not implemented on NES
    const SED: Opcode = 8'hF8 as Opcode;

    // Set interrupt disable flag
    const SEI: Opcode = 8'h78 as Opcode;


    /******** Otherwise ********/

    // Breakpoint (software interrupt)
    const BRK: Opcode = 8'h00 as Opcode;

    // No operation
    const NOP: Opcode = 8'hEA as Opcode;
}
